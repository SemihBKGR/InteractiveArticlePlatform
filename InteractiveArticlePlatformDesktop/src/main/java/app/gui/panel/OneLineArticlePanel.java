package app.gui.panel;

import app.Contracts;
import app.util.Paged;
import app.util.TypeConverts;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import core.DataHandler;
import core.entity.Article;
import core.entity.superficial.SuperficialArticle;
import core.util.ApiResponse;
import core.util.DataListener;

import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.Date;

public class OneLineArticlePanel {

    private JPanel panel;
    private JLabel titleLabel;
    private JLabel updateLabel;
    private JLabel createDateLabel;
    private JLabel statusLabel;
    private JLabel ownerLabel;
    private JLabel contributorCountLabel;

    private Article article;
    private SuperficialArticle superficialArticle;

    private OneLineArticlePanel(Paged paged) {

        panel.setBorder(new LineBorder(Contracts.DEFAULT_LIGHT_GRAY, 1));
        panel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        panel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (article != null) {
                    paged.changePage(ButtonPanel.ActiveButton.menu.name(), article);
                } else {
                    DataHandler.getDataHandler().getArticleAsync(superficialArticle.getId(), false, new DataListener<Article>() {
                        @Override
                        public void onResult(ApiResponse<Article> response) {
                            paged.changePage(ButtonPanel.ActiveButton.menu.name(), response.getData());
                        }
                    });
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                panel.setBorder(new LineBorder(Contracts.DEFAULT_BLUE, 3));
                titleLabel.setForeground(Color.WHITE);
                statusLabel.setForeground(Color.WHITE);
                createDateLabel.setForeground(Color.WHITE);
                updateLabel.setForeground(Color.WHITE);
                ownerLabel.setForeground(Color.WHITE);
                contributorCountLabel.setForeground(Color.WHITE);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                panel.setBorder(new LineBorder(Contracts.DEFAULT_LIGHT_GRAY, 1));
                titleLabel.setForeground(Contracts.DEFAULT_WHITE);
                statusLabel.setForeground(Contracts.DEFAULT_WHITE);
                createDateLabel.setForeground(Contracts.DEFAULT_WHITE);
                updateLabel.setForeground(Contracts.DEFAULT_WHITE);
                ownerLabel.setForeground(Contracts.DEFAULT_WHITE);
                contributorCountLabel.setForeground(Contracts.DEFAULT_WHITE);
            }
        });

    }

    public OneLineArticlePanel(Paged paged, SuperficialArticle article) {

        this(paged);
        this.superficialArticle = article;

        titleLabel.setText("Title : " + article.getTitle());
        statusLabel.setText("Status : " + (article.is_private() ? "Private" : "Public") + " / " + (article.is_released() ? "Released" : "Writing"));
        createDateLabel.setText("Created at : " + TypeConverts.getTimeString(article.getCreated_at()));
        updateLabel.setText("Last Update : " + TypeConverts.getTimeString(article.getUpdated_at()));
        ownerLabel.setText("Owner : " + article.getOwner_name());
        contributorCountLabel.setText("Contributor count : " + article.getContributor_count());

    }

    public OneLineArticlePanel(Paged paged, Article article) {

        this(paged);
        this.article = article;

        titleLabel.setText("Title : " + article.getTitle());
        statusLabel.setText("Status : " + (article.is_private() ? "Private" : "Public") + " / " + (article.is_released() ? "Released" : "Writing"));
        createDateLabel.setText("Created at : " + TypeConverts.getTimeString(article.getCreated_at()));
        updateLabel.setText("Last Update : " + TypeConverts.getTimeString(article.getUpdated_at()));
        ownerLabel.setText("Owner : " + article.getOwner().getUsername());
        contributorCountLabel.setText("Contributor count : " + article.getContributors().size());

    }

    public JPanel getPanel() {
        return panel;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(8, 1, new Insets(0, 0, 0, 0), -1, -1));
        Font panelFont = this.$$$getFont$$$(null, -1, 20, panel.getFont());
        if (panelFont != null) panel.setFont(panelFont);
        titleLabel = new JLabel();
        Font titleLabelFont = this.$$$getFont$$$(null, -1, 20, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setText("");
        panel.add(titleLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 10, false));
        createDateLabel = new JLabel();
        Font createDateLabelFont = this.$$$getFont$$$(null, -1, 20, createDateLabel.getFont());
        if (createDateLabelFont != null) createDateLabel.setFont(createDateLabelFont);
        createDateLabel.setText("");
        panel.add(createDateLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 10, false));
        statusLabel = new JLabel();
        Font statusLabelFont = this.$$$getFont$$$(null, -1, 20, statusLabel.getFont());
        if (statusLabelFont != null) statusLabel.setFont(statusLabelFont);
        statusLabel.setText("");
        panel.add(statusLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 10, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ownerLabel = new JLabel();
        Font ownerLabelFont = this.$$$getFont$$$(null, -1, 20, ownerLabel.getFont());
        if (ownerLabelFont != null) ownerLabel.setFont(ownerLabelFont);
        ownerLabel.setText("");
        panel.add(ownerLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 10, false));
        contributorCountLabel = new JLabel();
        Font contributorCountLabelFont = this.$$$getFont$$$(null, -1, 20, contributorCountLabel.getFont());
        if (contributorCountLabelFont != null) contributorCountLabel.setFont(contributorCountLabelFont);
        contributorCountLabel.setText("");
        panel.add(contributorCountLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 10, false));
        updateLabel = new JLabel();
        Font updateLabelFont = this.$$$getFont$$$(null, -1, 20, updateLabel.getFont());
        if (updateLabelFont != null) updateLabel.setFont(updateLabelFont);
        updateLabel.setText("");
        panel.add(updateLabel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 10, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
