package app.gui.panel;

import app.Contracts;
import app.util.Paged;
import app.util.Resources;
import app.util.TypeConverts;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import core.DataHandler;
import core.entity.Comment;
import core.entity.User;
import core.util.ApiResponse;
import core.util.DataListener;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.ByteArrayInputStream;
import java.io.IOException;

public class OneLineComment {

    private JPanel panel;
    private JLabel usernameLabel;
    private JLabel contentLabel;
    private JLabel imageLabel;

    public OneLineComment(Comment comment, Paged paged) {

        panel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        usernameLabel.setText(comment.getUser().getUsername() + " (" + TypeConverts.getTimeString(comment.getCreated_at()) + ") :");
        contentLabel.setText(comment.getContent());

        imageLabel.setBorder(new LineBorder(Color.BLACK, 2));

        DataHandler.getDataHandler().getImageAsync(comment.getUser().getId(), true, new DataListener<byte[]>() {
            @Override
            public void onResult(ApiResponse<byte[]> response) {
                byte[] image = response.getData();
                if (image != null) {
                    ByteArrayInputStream imageStream = new ByteArrayInputStream(image);
                    try {
                        ImageIcon imageIcon = new ImageIcon(Resources.resizeSmallSize(ImageIO.read(imageStream)));
                        imageLabel.setIcon(imageIcon);
                    } catch (IOException e) {
                        e.printStackTrace();
                        imageLabel.setIcon(Resources.smallDefaultImageIcon);
                    }
                } else {
                    imageLabel.setIcon(Resources.smallDefaultImageIcon);
                }
            }
        });

        panel.setBorder(new LineBorder(Contracts.DEFAULT_LIGHT_GRAY));

        panel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                DataHandler.getDataHandler().getUserAsync(comment.getUser().getId(), false, new DataListener<User>() {
                    @Override
                    public void onResult(ApiResponse<User> response) {
                        if (response.isConfirmed()) {
                            paged.changePage(ButtonPanel.ActiveButton.menu.name(), response.getData());
                        }
                    }
                });
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                usernameLabel.setForeground(Color.WHITE);
                contentLabel.setForeground(Color.WHITE);
                panel.setBorder(new LineBorder(Contracts.DEFAULT_BLUE, 2));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                usernameLabel.setForeground(Contracts.DEFAULT_WHITE);
                contentLabel.setForeground(Contracts.DEFAULT_WHITE);
                panel.setBorder(new LineBorder(Contracts.DEFAULT_LIGHT_GRAY));
            }
        });


    }


    public JPanel getPanel() {
        return panel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        imageLabel = new JLabel();
        imageLabel.setText("");
        panel.add(imageLabel, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 3, false));
        usernameLabel = new JLabel();
        Font usernameLabelFont = this.$$$getFont$$$(null, -1, 20, usernameLabel.getFont());
        if (usernameLabelFont != null) usernameLabel.setFont(usernameLabelFont);
        usernameLabel.setText("");
        panel.add(usernameLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        contentLabel = new JLabel();
        contentLabel.setText("");
        panel.add(contentLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
