package app.gui.panel;

import app.Contracts;
import app.util.Paged;
import app.util.Resources;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import core.entity.User;
import core.entity.superficial.SuperficialUser;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.ByteArrayInputStream;
import java.io.IOException;

public class OneLineUserPanel {
    private JLabel imageLabel;
    private JLabel usernameLabel;
    private JLabel emailLabel;
    private JPanel panel;
    private JLabel articleCountLabel;
    private JLabel contributorCountLabel;

    private User user;
    private SuperficialUser superficialUser;

    public OneLineUserPanel(User user, Paged paged) {

        imageLabel.setBorder(new LineBorder(Color.BLACK, 3));
        panel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));


        usernameLabel.setText("Username : " + user.getUsername());
        emailLabel.setText("Email : " + user.getEmail());
        articleCountLabel.setText("Article Count : " + user.getOwnArticles().size());
        contributorCountLabel.setText("Contribute Count : " + user.getContributorArticle().size());
        loadImage(user.getInformation().getImage());
        panel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                paged.changePage(ButtonPanel.ActiveButton.menu.name(), user);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                panel.setBorder(new LineBorder(Contracts.DEFAULT_BLUE, 3));
                usernameLabel.setForeground(Color.WHITE);
                emailLabel.setForeground(Color.WHITE);
                contributorCountLabel.setForeground(Color.WHITE);
                articleCountLabel.setForeground(Color.WHITE);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                panel.setBorder(new LineBorder(Contracts.DEFAULT_LIGHT_GRAY));
                usernameLabel.setForeground(Contracts.DEFAULT_WHITE);
                emailLabel.setForeground(Contracts.DEFAULT_WHITE);
                contributorCountLabel.setForeground(Contracts.DEFAULT_WHITE);
                articleCountLabel.setForeground(Contracts.DEFAULT_WHITE);
            }
        });

    }

    private void loadImage(byte[] image) {
        if (image != null) {
            ByteArrayInputStream imageStream = new ByteArrayInputStream(image);
            try {
                ImageIcon imageIcon = new ImageIcon(ImageIO.read(imageStream));
                imageLabel.setIcon(imageIcon);
            } catch (IOException e) {
                e.printStackTrace();
                imageLabel.setIcon(Resources.defaultImageIcon);
            }
        } else {
            imageLabel.setIcon(Resources.defaultImageIcon);
        }
    }


    public JPanel getPanel() {
        return panel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        emailLabel = new JLabel();
        Font emailLabelFont = this.$$$getFont$$$(null, -1, 20, emailLabel.getFont());
        if (emailLabelFont != null) emailLabel.setFont(emailLabelFont);
        emailLabel.setText("");
        panel.add(emailLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 5, false));
        imageLabel = new JLabel();
        imageLabel.setHorizontalAlignment(0);
        imageLabel.setHorizontalTextPosition(0);
        imageLabel.setText("");
        panel.add(imageLabel, new GridConstraints(0, 0, 6, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 5, false));
        usernameLabel = new JLabel();
        Font usernameLabelFont = this.$$$getFont$$$(null, -1, 20, usernameLabel.getFont());
        if (usernameLabelFont != null) usernameLabel.setFont(usernameLabelFont);
        usernameLabel.setText("");
        panel.add(usernameLabel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 5, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        articleCountLabel = new JLabel();
        Font articleCountLabelFont = this.$$$getFont$$$(null, -1, 20, articleCountLabel.getFont());
        if (articleCountLabelFont != null) articleCountLabel.setFont(articleCountLabelFont);
        articleCountLabel.setText("");
        panel.add(articleCountLabel, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 5, false));
        contributorCountLabel = new JLabel();
        Font contributorCountLabelFont = this.$$$getFont$$$(null, -1, 20, contributorCountLabel.getFont());
        if (contributorCountLabelFont != null) contributorCountLabel.setFont(contributorCountLabelFont);
        contributorCountLabel.setText("");
        panel.add(contributorCountLabel, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 5, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
