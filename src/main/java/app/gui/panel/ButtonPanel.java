package app.gui.panel;

import app.Contracts;
import app.util.ClickListener;
import app.util.Paged;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.extern.log4j.Log4j;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

@Log4j
public class ButtonPanel {

    private JButton logoutButton;
    private JButton profileButton;
    private JButton searchButton;
    private JButton menuButton;
    private JToolBar buttonToolBar;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        buttonToolBar = new JToolBar();
        buttonToolBar.setFloatable(false);
        panel1.add(buttonToolBar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        logoutButton = new JButton();
        logoutButton.setText("Logout");
        buttonToolBar.add(logoutButton);
        final Spacer spacer2 = new Spacer();
        buttonToolBar.add(spacer2);
        profileButton = new JButton();
        profileButton.setText("Profile");
        buttonToolBar.add(profileButton);
        final JToolBar.Separator toolBar$Separator1 = new JToolBar.Separator();
        buttonToolBar.add(toolBar$Separator1);
        searchButton = new JButton();
        searchButton.setText("Search");
        buttonToolBar.add(searchButton);
        final JToolBar.Separator toolBar$Separator2 = new JToolBar.Separator();
        buttonToolBar.add(toolBar$Separator2);
        menuButton = new JButton();
        menuButton.setText("Menu");
        buttonToolBar.add(menuButton);
        final JToolBar.Separator toolBar$Separator3 = new JToolBar.Separator();
        buttonToolBar.add(toolBar$Separator3);
    }

    public enum ActiveButton {

        logout,
        profile,
        search,
        menu;

        static ActiveButton getDefault() {
            return profile;
        }

    }

    private ActiveButton activeButton;

    public ButtonPanel(Paged paged, ClickListener logoutListener) {

        logoutButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (activeButton != ActiveButton.logout) {
                    log.info("ButtonPanel clicked logout");
                    activeButton = ActiveButton.logout;
                    setButtonForeColor();
                    logoutListener.clicked();
                }
            }
        });

        profileButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (activeButton != ActiveButton.profile) {
                    log.info("ButtonPanel clicked profile");
                    activeButton = ActiveButton.profile;
                    setButtonForeColor();
                    paged.changePage(activeButton.name());
                }
            }
        });

        menuButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (activeButton != ActiveButton.menu) {
                    log.info("ButtonPanel clicked home");
                    activeButton = ActiveButton.menu;
                    setButtonForeColor();
                    paged.changePage(activeButton.name());
                }
            }
        });

        searchButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (activeButton != ActiveButton.search) {
                    log.info("ButtonPanel clicked search");
                    activeButton = ActiveButton.search;
                    setButtonForeColor();
                    paged.changePage(activeButton.name());
                }
            }
        });

        activeButton = ActiveButton.getDefault();
        setButtonForeColor();

    }

    public void setButtonForeColor() {

        menuButton.setForeground(Color.WHITE);
        searchButton.setForeground(Color.WHITE);
        profileButton.setForeground(Color.WHITE);
        logoutButton.setForeground(Color.WHITE);

        if (activeButton == ActiveButton.menu) {
            menuButton.setForeground(Contracts.DEFAULT_BLUE);
        } else if (activeButton == ActiveButton.logout) {
            logoutButton.setForeground(Contracts.DEFAULT_BLUE);
        } else if (activeButton == ActiveButton.search) {
            searchButton.setForeground(Contracts.DEFAULT_BLUE);
        } else {
            profileButton.setForeground(Contracts.DEFAULT_BLUE);
        }

    }

    public void setExplicitlyActive(ActiveButton active) {
        activeButton = active;
        setButtonForeColor();
    }


    public JToolBar getButtonToolBar() {
        return buttonToolBar;
    }

}
