package app.gui.page;

import app.gui.panel.OneLineArticlePanel;
import app.gui.panel.OneLineUserPanel;
import app.util.Confirmation;
import app.util.Paged;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import core.DataHandler;
import core.entity.Article;
import core.entity.User;
import core.util.ApiResponse;
import core.util.DataListener;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

public class SearchPage {

    private static final int GRID_ROW_MIN_COUNT = 5;

    private JPanel panel;
    private JTextField searchField;
    private JButton searchButton;
    private JPanel searchInnerPanel;
    private JComboBox searchItemComboBox;
    private JLabel infoLabel;

    private AtomicBoolean searchButtonClickable;

    private SearchItem currentSearchItem;

    private Paged paged;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(3, 5, new Insets(0, 0, 0, 0), -1, -1));
        searchField = new JTextField();
        panel.add(searchField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel.add(spacer2, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        searchButton = new JButton();
        searchButton.setText("Search");
        panel.add(searchButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(2, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(searchInnerPanel);
        searchItemComboBox = new JComboBox();
        panel.add(searchItemComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        infoLabel = new JLabel();
        infoLabel.setHorizontalAlignment(0);
        infoLabel.setText("");
        panel.add(infoLabel, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    private enum SearchItem {

        user("User"),
        article("Article");

        private String searchItem;

        SearchItem(String searchItem) {
            this.searchItem = searchItem;
        }

        private String getSearchItem() {
            return searchItem;
        }

        private static SearchItem getByName(String name) {
            for (SearchItem item : SearchItem.values()) {
                if (item.getSearchItem().equals(name)) return item;
            }
            return getDefault();
        }

        private static SearchItem getDefault() {
            return user;
        }

    }

    public SearchPage(Paged paged) {

        this.paged = paged;

        searchButtonClickable = new AtomicBoolean(true);

        $$$setupUI$$$();
        currentSearchItem = SearchItem.getDefault();

        for (SearchItem searchItem : SearchItem.values()) {
            searchItemComboBox.addItem(searchItem.getSearchItem());
        }
        searchItemComboBox.setSelectedItem(currentSearchItem.getSearchItem());

        searchItemComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                currentSearchItem = SearchItem.getByName((String) e.getItem());
            }
        });


        searchButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (searchButtonClickable.get()) {
                    searchButtonClickable.set(false);
                    String text = searchField.getText().trim();
                    Confirmation.ConfirmationMessage confirmationMessage = Confirmation.searchTextConfirmation(text);
                    if (confirmationMessage.isConfirmed()) {
                        searchInnerPanel.removeAll();
                        makeSearch(text);
                    } else {
                        infoLabel.setText(confirmationMessage.getMessages());
                        searchButtonClickable.set(true);
                    }
                }
            }
        });

    }


    public JPanel getPanel() {
        return panel;
    }

    private void createUIComponents() {
        searchInnerPanel = new JPanel();
        GridLayout gridLayout = new GridLayout(0, 1);
        gridLayout.setVgap(10);
        searchInnerPanel.setLayout(gridLayout);
        searchInnerPanel.setBorder(new EmptyBorder(50, 50, 50, 50));

    }

    private void makeSearch(String text) {

        switch (currentSearchItem) {

            case user:

                DataHandler.getDataHandler().searchUserAsync(text, new DataListener<List<User>>() {

                    @Override
                    public void onStart() {
                        infoLabel.setText("Searching ...");
                    }

                    @Override
                    public void onException(Throwable t) {
                        infoLabel.setText("Something wrong");
                        t.printStackTrace();
                        searchButtonClickable.set(true);
                    }

                    @Override
                    public void onResult(ApiResponse<List<User>> response) {
                        setGridRowCount(response.getData().size());
                        for (User user : response.getData()) {
                            searchInnerPanel.add(new OneLineUserPanel(user, paged).getPanel());
                        }
                        setInfoLabelResultText(response.getData().size());
                        searchButtonClickable.set(true);
                    }
                });

                break;

            case article:

                DataHandler.getDataHandler().searchArticleAsync(text, new DataListener<List<Article>>() {
                    @Override
                    public void onException(Throwable t) {
                        infoLabel.setText("Something wrong");
                        t.printStackTrace();
                        searchButtonClickable.set(true);
                    }

                    @Override
                    public void onResult(ApiResponse<List<Article>> response) {
                        setGridRowCount(response.getData().size());
                        for (Article article : response.getData()) {
                            searchInnerPanel.add(new OneLineArticlePanel(paged, article).getPanel());
                        }
                        setInfoLabelResultText(response.getData().size());
                        searchButtonClickable.set(true);
                    }
                });

                break;

        }


    }

    private void setInfoLabelResultText(int size) {
        infoLabel.setText("Search result size " + size);
    }

    private void setGridRowCount(int size) {
        ((GridLayout) searchInnerPanel.getLayout()).setRows(Math.max(size, GRID_ROW_MIN_COUNT));
    }

}
